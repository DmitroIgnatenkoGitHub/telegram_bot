from telegram.ext import Updater, Filters, CommandHandler, MessageHandler
from tensorflow.keras.applications.resnet50 import ResNet50
import cv2
import numpy as np
from labelsRus import label
import os
import json
import string

model = ResNet50()


async def on_startup(_):
    print('–ë–æ—Ç –≤—ã—à–µ–ª –≤ –æ–Ω–ª–∞–π–Ω')


def start(updater, context):
    updater.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")


def help_(updater, context):
    updater.message.reply_text("–ü—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á—Ç–æ —ç—Ç–æ")

def please(updater, context):
    updater.message.reply_text("–ü–æ—Å—Ç–∞–≤—Ç–∏ –∑–∞—á–µ—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ üëâüëà")

def message(updater, context):
    msg = updater.message.text
    if {i.lower().translate(str.maketrans('', '', string.punctuation)) for i in msg.split(' ')} \
            .intersection(set(json.load(open('censorship.json')))) != set():
        print(msg)
        updater.message.reply_text(('–†–µ–±—è—Ç–∞, –æ–±—â–∞–π—Ç–µ—Å—å –±–µ–∑ –º–∞—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞'))
        updater.message.delete()


def image(updater, context):
    photo = updater.message.photo[-1].get_file()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏—Å–ª–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    photo.download("img.jpg")  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ jpg

    img = cv2.imread("img.jpg")  # –ü—Ä–æ—á—Ç–µ–Ω–∏–µ

    img = cv2.resize(img, (224, 224))  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ 244x244
    img = np.reshape(img, (1, 224, 224, 3))  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞

    prediction = np.argmax(model.predict(img))

    prediction = label[prediction]

    print(prediction)  # –≤—ã–≤–æ–¥ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    updater.message.reply_text(prediction)  # –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é


token = os.getenv('TOKEN')
updater = Updater(token)
dispatcher = updater.dispatcher

dispatcher.add_handler(CommandHandler("start", start))
dispatcher.add_handler(CommandHandler("help", help_))
dispatcher.add_handler(CommandHandler("please", please))
dispatcher.add_handler(MessageHandler(Filters.text, message))
dispatcher.add_handler(MessageHandler(Filters.photo, image))

updater.start_polling()
updater.idle()
